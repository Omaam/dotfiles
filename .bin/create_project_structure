#!/bin/bash

PROGRAM=$(basename $0)

# ヘルプメッセージ
usage() {
  echo "Usage: $PROGRAM project_name [-s style]"
  echo "Styles:"
  echo "  development - Default style for development projects"
  echo "  lecture - Style for lecture materials"
}

# スタイルごとのディレクトリ構造を作成する関数
create_structure() {
  local project_name=$1
  local style=$2

  case $style in
    development)
      create_project_development $project_name
      ;;
    lecture)
      create_project_lecture $project_name
      ;;
    *)
      echo "Unknown style: $style"
      usage
      exit 1
      ;;
  esac
}


create_project_development() {

  project_name=$1

  mkdir -p "$project_name/data/external"     # Data from third party sources.
  mkdir -p "$project_name/data/interim"      # Intermediate data that has been transformed.
  mkdir -p "$project_name/data/processed"    # The final, canonical data sets for modeling.
  mkdir -p "$project_name/data/raw"          # The original, immutable data dump.
  mkdir -p "$project_name/docker"            # The docker envioronment
  mkdir -p "$project_name/docs"              # A default Sphinx project; see sphinx-doc.org for details
  mkdir -p "$project_name/models"            # Trained and serialized models, model predictions, or model summaries
  mkdir -p "$project_name/notebooks"         # Jupyter notebooks. Naming convention is a number (for ordering),
                                             # the creator's initials, and a short `-` delimited description, e.g.
                                             # `1.0-jqp-initial-data-exploration`.
  mkdir -p "$project_name/references"        # Data dictionaries, manuals, and all other explanatory materials.
  mkdir -p "$project_name/reports"           # Generated analysis as HTML, PDF, LaTeX, etc.
  mkdir -p "$project_name/reports/figures"   # Generated graphics and figures to be used in reporting
  mkdir -p "$project_name/src"               # Source code for use in this project.
  mkdir -p "$project_name/src/data"          # Scripts to download or generate data
  mkdir -p "$project_name/src/features"      # Scripts to turn raw data into features for modeling
  mkdir -p "$project_name/src/models"        # Scripts to train models and then use trained models to make
                                             # predictions
  mkdir -p "$project_name/src/visualization" # Scripts to create exploratory and results oriented visualizations

  touch "$project_name/LICENSE"                         # License file for the project.
  touch "$project_name/Makefile"                        # Makefile with commands like `make data` or `make train`
  touch "$project_name/README.md"                       # The top-level README for developers using this project.
  touch "$project_name/requirements.txt"                # The requirements file for reproducing the analysis environment
                                                        # generated with `pip freeze > requirements.txt`
  touch "$project_name/setup.py"                        # Make this project pip installable with `pip install -e`
  touch "$project_name/docker/Dockerfile"               # Base docker env.
  touch "$project_name/docker/compose.yml"              # How to compose docker env.
  touch "$project_name/src/__init__.py"                 # Makes src a Python module
  touch "$project_name/src/data/make_dataset.py"        # Script to make dataset
  touch "$project_name/src/features/build_features.py"  # Script to build features
  touch "$project_name/src/models/predict_model.py"     # Script to predict model
  touch "$project_name/src/models/train_model.py"       # Script to train model
  touch "$project_name/src/visualization/visualize.py"  # Script to visualize data
}


create_project_lecture() {

  project_name=$1

  mkdir -p "$project_name/slides"    #
  mkdir -p "$project_name/handouts"  #
  mkdir -p "$project_name/exercises" #
  touch "$project_name/README.md"    #
}


# 引数の解析
if [ $# -lt 1 ]; then
  usage
  exit 1
fi

# 引数が '-' から始まる場合のチェック
if [[ $1 == -* ]]; then
  echo "Error: Project name cannot start with '-'."
  usage
  exit 1
fi

project_name=$1
style="development" # デフォルトスタイル

shift
while getopts "s:" opt; do
  case $opt in
    s)
      style=$OPTARG
      ;;
    *)
      usage
      exit 1
      ;;
  esac
done

# ディレクトリ構造の作成
create_structure "$project_name" "$style"
echo "Project '$project_name' created with style '$style'."
